org.quartz.scheduler.instanceName = EXPERIMENT_SCHEDULER

# Is the name of the ThreadPool implementation you wish to use. The threadpool that ships
# with Quartz is org.quartz.simpl.SimpleThreadPool, and should meet the needs of nearly every user. 
# It has very simple behavior and is very well tested. It provides a fixed-size pool of threads that live 
# the lifetime of the Scheduler.
org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool

# Can be any positive integer, although you should realize that only numbers between 1 and 100 are very practical. 
# This is the number of threads that are available for concurrent execution of jobs. If you only have a few jobs 
# that fire a few times a day, then 1 thread is plenty! If you have tens of thousands of jobs, with many firing 
# every minute, then you probably want a thread count more like 50 or 100 (this highly depends on the nature of 
# the work that your jobs perform, and your systems resources!).
org.quartz.threadPool.threadCount = 50

#Can be true or false, and defaults to false.
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread = true
 
#####################################################
# Jobstore properties
#####################################################

#specify the jobstore used
org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX


org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate

# Instructs JDBCJobStore that all values in JobDataMaps will be Strings, and therefore can be stored as name-value pairs,
# rather than storing more complex objects in their serialized form in the BLOB column. This is can be handy, as you 
# avoid the class versioning issues that can arise from serializing your non-String classes into a BLOB
org.quartz.jobStore.useProperties = false
 
#The datasource for the jobstore that is to be used
#The value of this property must be the name of one the DataSources defined in the configuration properties file
org.quartz.jobStore.dataSource = experimentScheduler

##################################################### 
#quartz table prefixes in the database
#####################################################

# JDBCJobStore's table prefix property is a string equal to the prefix given to Quartz's
# tables that were created in your database. You can have multiple sets of Quartz's tables within the same 
# database if they use different table prefixes.
org.quartz.jobStore.tablePrefix = QRTZ_

# The the number of milliseconds the scheduler will tolerate a trigger to pass its next-fire-time
# by, before being considered misfired. The default value (if you don't make an entry of this 
# property in your configuration) is 60000 (60 seconds)
org.quartz.jobStore.misfireThreshold = 60000

# Set to true in order to turn on clustering features. This property must be set to true if you are 
# having multiple instances of Quartz use the same set of database tables otherwise you will experience
# havoc. See the configuration docs for clustering for more information.
org.quartz.jobStore.isClustered = false
 

#####################################################
#The details of the datasource specified previously
#####################################################

#Must be the java class name of the JDBC driver for your database.
org.quartz.dataSource.experimentScheduler.driver = com.mysql.jdbc.Driver

#The connection URL (host, port, etc.) for connection to your database.
org.quartz.dataSource.experimentScheduler.URL = jdbc:mysql://localhost:3306/scheduler

#The user name to use when connecting to your database.
org.quartz.dataSource.experimentScheduler.user = <USERNAME>

#The password to use when connecting to your database.
org.quartz.dataSource.experimentScheduler.password = <PASSWORD>

#The maximum number of connections that the DataSource can create in its pool of connections.
org.quartz.dataSource.experimentScheduler.maxConnections = 200